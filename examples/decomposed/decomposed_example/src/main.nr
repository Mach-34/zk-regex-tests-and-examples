global table = comptime { make_lookup_table() };
pub fn regex_match<let N: u32>(input: [u8; N]) -> Vec<BoundedVec<Field, N>> {
    // regex: email was meant for @[a-z]+
    let mut substrings: Vec<BoundedVec<Field, N>> = Vec::new();

    // "Previous" state
    let mut s: Field = 0;
    s = table[255];
    // "Next"/upcoming state
    let mut s_next: Field = 0;

    let mut consecutive_substr = 0;
    let mut current_substring = BoundedVec::new();

    for i in 0..input.len() {
        let temp = input[i] as Field;
        let mut reset = false;
        s_next = table[s * 256 + temp];
        if s_next == 0 {
            // Check if there is any transition that could be done from a "restart"
            s_next = table[temp];
            // whether the next state changes or not, we mark this as a reset.
            reset = true;
            s = 0;
        }

        // If a substring was in the making, but the state was reset
        // we disregard previous progress because apparently it is invalid
        if (reset & (consecutive_substr == 1)) {
            current_substring = BoundedVec::new();
            consecutive_substr = 0;
        }
        // Fill up substrings
        if ((s == 21) & (s_next == 22) | (s == 22) & (s_next == 22)) {
            if (consecutive_substr == 0) {
                current_substring.push(temp);
                consecutive_substr = 1;
            } else if (consecutive_substr == 1) {
                current_substring.push(temp);
            }
        } else if ((consecutive_substr == 1) & (s_next == 0)) {
            current_substring = BoundedVec::new();
            consecutive_substr = 0;
        } else if (consecutive_substr == 1) {
            // The substring is done so "save" it
            substrings.push(current_substring);
            // reset the substring holder for next use
            current_substring = BoundedVec::new();
            consecutive_substr = 0;
        }
        s = s_next;
    }
    assert((s == 22) | (s == 23), f"no match: {s}");
    // Add pending substring that hasn't been added
    if consecutive_substr == 1 {
        substrings.push(current_substring);
    }
    substrings
}

comptime fn make_lookup_table() -> [Field; 6144] {
    let mut table = [0; 6144];
    table[22 * 256 + 0] = 23;
    table[23 * 256 + 0] = 23;
    table[22 * 256 + 1] = 23;
    table[23 * 256 + 1] = 23;
    table[22 * 256 + 2] = 23;
    table[23 * 256 + 2] = 23;
    table[22 * 256 + 3] = 23;
    table[23 * 256 + 3] = 23;
    table[22 * 256 + 4] = 23;
    table[23 * 256 + 4] = 23;
    table[22 * 256 + 5] = 23;
    table[23 * 256 + 5] = 23;
    table[22 * 256 + 6] = 23;
    table[23 * 256 + 6] = 23;
    table[22 * 256 + 7] = 23;
    table[23 * 256 + 7] = 23;
    table[22 * 256 + 8] = 23;
    table[23 * 256 + 8] = 23;
    table[22 * 256 + 9] = 23;
    table[23 * 256 + 9] = 23;
    table[22 * 256 + 10] = 23;
    table[23 * 256 + 10] = 23;
    table[22 * 256 + 11] = 23;
    table[23 * 256 + 11] = 23;
    table[22 * 256 + 12] = 23;
    table[23 * 256 + 12] = 23;
    table[22 * 256 + 13] = 23;
    table[23 * 256 + 13] = 23;
    table[22 * 256 + 14] = 23;
    table[23 * 256 + 14] = 23;
    table[22 * 256 + 15] = 23;
    table[23 * 256 + 15] = 23;
    table[22 * 256 + 16] = 23;
    table[23 * 256 + 16] = 23;
    table[22 * 256 + 17] = 23;
    table[23 * 256 + 17] = 23;
    table[22 * 256 + 18] = 23;
    table[23 * 256 + 18] = 23;
    table[22 * 256 + 19] = 23;
    table[23 * 256 + 19] = 23;
    table[22 * 256 + 20] = 23;
    table[23 * 256 + 20] = 23;
    table[22 * 256 + 21] = 23;
    table[23 * 256 + 21] = 23;
    table[22 * 256 + 22] = 23;
    table[23 * 256 + 22] = 23;
    table[22 * 256 + 23] = 23;
    table[23 * 256 + 23] = 23;
    table[22 * 256 + 24] = 23;
    table[23 * 256 + 24] = 23;
    table[22 * 256 + 25] = 23;
    table[23 * 256 + 25] = 23;
    table[22 * 256 + 26] = 23;
    table[23 * 256 + 26] = 23;
    table[22 * 256 + 27] = 23;
    table[23 * 256 + 27] = 23;
    table[22 * 256 + 28] = 23;
    table[23 * 256 + 28] = 23;
    table[22 * 256 + 29] = 23;
    table[23 * 256 + 29] = 23;
    table[22 * 256 + 30] = 23;
    table[23 * 256 + 30] = 23;
    table[22 * 256 + 31] = 23;
    table[23 * 256 + 31] = 23;
    table[22 * 256 + 32] = 23;
    table[23 * 256 + 32] = 23;
    table[22 * 256 + 33] = 23;
    table[23 * 256 + 33] = 23;
    table[22 * 256 + 34] = 23;
    table[23 * 256 + 34] = 23;
    table[22 * 256 + 35] = 23;
    table[23 * 256 + 35] = 23;
    table[22 * 256 + 36] = 23;
    table[23 * 256 + 36] = 23;
    table[22 * 256 + 37] = 23;
    table[23 * 256 + 37] = 23;
    table[22 * 256 + 38] = 23;
    table[23 * 256 + 38] = 23;
    table[22 * 256 + 39] = 23;
    table[23 * 256 + 39] = 23;
    table[22 * 256 + 40] = 23;
    table[23 * 256 + 40] = 23;
    table[22 * 256 + 41] = 23;
    table[23 * 256 + 41] = 23;
    table[22 * 256 + 42] = 23;
    table[23 * 256 + 42] = 23;
    table[22 * 256 + 43] = 23;
    table[23 * 256 + 43] = 23;
    table[22 * 256 + 44] = 23;
    table[23 * 256 + 44] = 23;
    table[22 * 256 + 45] = 23;
    table[23 * 256 + 45] = 23;
    table[22 * 256 + 46] = 23;
    table[23 * 256 + 46] = 23;
    table[22 * 256 + 47] = 23;
    table[23 * 256 + 47] = 23;
    table[22 * 256 + 48] = 23;
    table[23 * 256 + 48] = 23;
    table[22 * 256 + 49] = 23;
    table[23 * 256 + 49] = 23;
    table[22 * 256 + 50] = 23;
    table[23 * 256 + 50] = 23;
    table[22 * 256 + 51] = 23;
    table[23 * 256 + 51] = 23;
    table[22 * 256 + 52] = 23;
    table[23 * 256 + 52] = 23;
    table[22 * 256 + 53] = 23;
    table[23 * 256 + 53] = 23;
    table[22 * 256 + 54] = 23;
    table[23 * 256 + 54] = 23;
    table[22 * 256 + 55] = 23;
    table[23 * 256 + 55] = 23;
    table[22 * 256 + 56] = 23;
    table[23 * 256 + 56] = 23;
    table[22 * 256 + 57] = 23;
    table[23 * 256 + 57] = 23;
    table[22 * 256 + 58] = 23;
    table[23 * 256 + 58] = 23;
    table[22 * 256 + 59] = 23;
    table[23 * 256 + 59] = 23;
    table[22 * 256 + 60] = 23;
    table[23 * 256 + 60] = 23;
    table[22 * 256 + 61] = 23;
    table[23 * 256 + 61] = 23;
    table[22 * 256 + 62] = 23;
    table[23 * 256 + 62] = 23;
    table[22 * 256 + 63] = 23;
    table[23 * 256 + 63] = 23;
    table[22 * 256 + 64] = 23;
    table[23 * 256 + 64] = 23;
    table[22 * 256 + 65] = 23;
    table[23 * 256 + 65] = 23;
    table[22 * 256 + 66] = 23;
    table[23 * 256 + 66] = 23;
    table[22 * 256 + 67] = 23;
    table[23 * 256 + 67] = 23;
    table[22 * 256 + 68] = 23;
    table[23 * 256 + 68] = 23;
    table[22 * 256 + 69] = 23;
    table[23 * 256 + 69] = 23;
    table[22 * 256 + 70] = 23;
    table[23 * 256 + 70] = 23;
    table[22 * 256 + 71] = 23;
    table[23 * 256 + 71] = 23;
    table[22 * 256 + 72] = 23;
    table[23 * 256 + 72] = 23;
    table[22 * 256 + 73] = 23;
    table[23 * 256 + 73] = 23;
    table[22 * 256 + 74] = 23;
    table[23 * 256 + 74] = 23;
    table[22 * 256 + 75] = 23;
    table[23 * 256 + 75] = 23;
    table[22 * 256 + 76] = 23;
    table[23 * 256 + 76] = 23;
    table[22 * 256 + 77] = 23;
    table[23 * 256 + 77] = 23;
    table[22 * 256 + 78] = 23;
    table[23 * 256 + 78] = 23;
    table[22 * 256 + 79] = 23;
    table[23 * 256 + 79] = 23;
    table[22 * 256 + 80] = 23;
    table[23 * 256 + 80] = 23;
    table[22 * 256 + 81] = 23;
    table[23 * 256 + 81] = 23;
    table[22 * 256 + 82] = 23;
    table[23 * 256 + 82] = 23;
    table[22 * 256 + 83] = 23;
    table[23 * 256 + 83] = 23;
    table[22 * 256 + 84] = 23;
    table[23 * 256 + 84] = 23;
    table[22 * 256 + 85] = 23;
    table[23 * 256 + 85] = 23;
    table[22 * 256 + 86] = 23;
    table[23 * 256 + 86] = 23;
    table[22 * 256 + 87] = 23;
    table[23 * 256 + 87] = 23;
    table[22 * 256 + 88] = 23;
    table[23 * 256 + 88] = 23;
    table[22 * 256 + 89] = 23;
    table[23 * 256 + 89] = 23;
    table[22 * 256 + 90] = 23;
    table[23 * 256 + 90] = 23;
    table[22 * 256 + 91] = 23;
    table[23 * 256 + 91] = 23;
    table[22 * 256 + 92] = 23;
    table[23 * 256 + 92] = 23;
    table[22 * 256 + 93] = 23;
    table[23 * 256 + 93] = 23;
    table[22 * 256 + 94] = 23;
    table[23 * 256 + 94] = 23;
    table[22 * 256 + 95] = 23;
    table[23 * 256 + 95] = 23;
    table[22 * 256 + 96] = 23;
    table[23 * 256 + 96] = 23;
    table[22 * 256 + 97] = 23;
    table[23 * 256 + 97] = 23;
    table[22 * 256 + 98] = 23;
    table[23 * 256 + 98] = 23;
    table[22 * 256 + 99] = 23;
    table[23 * 256 + 99] = 23;
    table[22 * 256 + 100] = 23;
    table[23 * 256 + 100] = 23;
    table[22 * 256 + 101] = 23;
    table[23 * 256 + 101] = 23;
    table[22 * 256 + 102] = 23;
    table[23 * 256 + 102] = 23;
    table[22 * 256 + 103] = 23;
    table[23 * 256 + 103] = 23;
    table[22 * 256 + 104] = 23;
    table[23 * 256 + 104] = 23;
    table[22 * 256 + 105] = 23;
    table[23 * 256 + 105] = 23;
    table[22 * 256 + 106] = 23;
    table[23 * 256 + 106] = 23;
    table[22 * 256 + 107] = 23;
    table[23 * 256 + 107] = 23;
    table[22 * 256 + 108] = 23;
    table[23 * 256 + 108] = 23;
    table[22 * 256 + 109] = 23;
    table[23 * 256 + 109] = 23;
    table[22 * 256 + 110] = 23;
    table[23 * 256 + 110] = 23;
    table[22 * 256 + 111] = 23;
    table[23 * 256 + 111] = 23;
    table[22 * 256 + 112] = 23;
    table[23 * 256 + 112] = 23;
    table[22 * 256 + 113] = 23;
    table[23 * 256 + 113] = 23;
    table[22 * 256 + 114] = 23;
    table[23 * 256 + 114] = 23;
    table[22 * 256 + 115] = 23;
    table[23 * 256 + 115] = 23;
    table[22 * 256 + 116] = 23;
    table[23 * 256 + 116] = 23;
    table[22 * 256 + 117] = 23;
    table[23 * 256 + 117] = 23;
    table[22 * 256 + 118] = 23;
    table[23 * 256 + 118] = 23;
    table[22 * 256 + 119] = 23;
    table[23 * 256 + 119] = 23;
    table[22 * 256 + 120] = 23;
    table[23 * 256 + 120] = 23;
    table[22 * 256 + 121] = 23;
    table[23 * 256 + 121] = 23;
    table[22 * 256 + 122] = 23;
    table[23 * 256 + 122] = 23;
    table[22 * 256 + 123] = 23;
    table[23 * 256 + 123] = 23;
    table[22 * 256 + 124] = 23;
    table[23 * 256 + 124] = 23;
    table[22 * 256 + 125] = 23;
    table[23 * 256 + 125] = 23;
    table[22 * 256 + 126] = 23;
    table[23 * 256 + 126] = 23;
    table[22 * 256 + 127] = 23;
    table[23 * 256 + 127] = 23;
    table[22 * 256 + 128] = 23;
    table[23 * 256 + 128] = 23;
    table[22 * 256 + 129] = 23;
    table[23 * 256 + 129] = 23;
    table[22 * 256 + 130] = 23;
    table[23 * 256 + 130] = 23;
    table[22 * 256 + 131] = 23;
    table[23 * 256 + 131] = 23;
    table[22 * 256 + 132] = 23;
    table[23 * 256 + 132] = 23;
    table[22 * 256 + 133] = 23;
    table[23 * 256 + 133] = 23;
    table[22 * 256 + 134] = 23;
    table[23 * 256 + 134] = 23;
    table[22 * 256 + 135] = 23;
    table[23 * 256 + 135] = 23;
    table[22 * 256 + 136] = 23;
    table[23 * 256 + 136] = 23;
    table[22 * 256 + 137] = 23;
    table[23 * 256 + 137] = 23;
    table[22 * 256 + 138] = 23;
    table[23 * 256 + 138] = 23;
    table[22 * 256 + 139] = 23;
    table[23 * 256 + 139] = 23;
    table[22 * 256 + 140] = 23;
    table[23 * 256 + 140] = 23;
    table[22 * 256 + 141] = 23;
    table[23 * 256 + 141] = 23;
    table[22 * 256 + 142] = 23;
    table[23 * 256 + 142] = 23;
    table[22 * 256 + 143] = 23;
    table[23 * 256 + 143] = 23;
    table[22 * 256 + 144] = 23;
    table[23 * 256 + 144] = 23;
    table[22 * 256 + 145] = 23;
    table[23 * 256 + 145] = 23;
    table[22 * 256 + 146] = 23;
    table[23 * 256 + 146] = 23;
    table[22 * 256 + 147] = 23;
    table[23 * 256 + 147] = 23;
    table[22 * 256 + 148] = 23;
    table[23 * 256 + 148] = 23;
    table[22 * 256 + 149] = 23;
    table[23 * 256 + 149] = 23;
    table[22 * 256 + 150] = 23;
    table[23 * 256 + 150] = 23;
    table[22 * 256 + 151] = 23;
    table[23 * 256 + 151] = 23;
    table[22 * 256 + 152] = 23;
    table[23 * 256 + 152] = 23;
    table[22 * 256 + 153] = 23;
    table[23 * 256 + 153] = 23;
    table[22 * 256 + 154] = 23;
    table[23 * 256 + 154] = 23;
    table[22 * 256 + 155] = 23;
    table[23 * 256 + 155] = 23;
    table[22 * 256 + 156] = 23;
    table[23 * 256 + 156] = 23;
    table[22 * 256 + 157] = 23;
    table[23 * 256 + 157] = 23;
    table[22 * 256 + 158] = 23;
    table[23 * 256 + 158] = 23;
    table[22 * 256 + 159] = 23;
    table[23 * 256 + 159] = 23;
    table[22 * 256 + 160] = 23;
    table[23 * 256 + 160] = 23;
    table[22 * 256 + 161] = 23;
    table[23 * 256 + 161] = 23;
    table[22 * 256 + 162] = 23;
    table[23 * 256 + 162] = 23;
    table[22 * 256 + 163] = 23;
    table[23 * 256 + 163] = 23;
    table[22 * 256 + 164] = 23;
    table[23 * 256 + 164] = 23;
    table[22 * 256 + 165] = 23;
    table[23 * 256 + 165] = 23;
    table[22 * 256 + 166] = 23;
    table[23 * 256 + 166] = 23;
    table[22 * 256 + 167] = 23;
    table[23 * 256 + 167] = 23;
    table[22 * 256 + 168] = 23;
    table[23 * 256 + 168] = 23;
    table[22 * 256 + 169] = 23;
    table[23 * 256 + 169] = 23;
    table[22 * 256 + 170] = 23;
    table[23 * 256 + 170] = 23;
    table[22 * 256 + 171] = 23;
    table[23 * 256 + 171] = 23;
    table[22 * 256 + 172] = 23;
    table[23 * 256 + 172] = 23;
    table[22 * 256 + 173] = 23;
    table[23 * 256 + 173] = 23;
    table[22 * 256 + 174] = 23;
    table[23 * 256 + 174] = 23;
    table[22 * 256 + 175] = 23;
    table[23 * 256 + 175] = 23;
    table[22 * 256 + 176] = 23;
    table[23 * 256 + 176] = 23;
    table[22 * 256 + 177] = 23;
    table[23 * 256 + 177] = 23;
    table[22 * 256 + 178] = 23;
    table[23 * 256 + 178] = 23;
    table[22 * 256 + 179] = 23;
    table[23 * 256 + 179] = 23;
    table[22 * 256 + 180] = 23;
    table[23 * 256 + 180] = 23;
    table[22 * 256 + 181] = 23;
    table[23 * 256 + 181] = 23;
    table[22 * 256 + 182] = 23;
    table[23 * 256 + 182] = 23;
    table[22 * 256 + 183] = 23;
    table[23 * 256 + 183] = 23;
    table[22 * 256 + 184] = 23;
    table[23 * 256 + 184] = 23;
    table[22 * 256 + 185] = 23;
    table[23 * 256 + 185] = 23;
    table[22 * 256 + 186] = 23;
    table[23 * 256 + 186] = 23;
    table[22 * 256 + 187] = 23;
    table[23 * 256 + 187] = 23;
    table[22 * 256 + 188] = 23;
    table[23 * 256 + 188] = 23;
    table[22 * 256 + 189] = 23;
    table[23 * 256 + 189] = 23;
    table[22 * 256 + 190] = 23;
    table[23 * 256 + 190] = 23;
    table[22 * 256 + 191] = 23;
    table[23 * 256 + 191] = 23;
    table[22 * 256 + 192] = 23;
    table[23 * 256 + 192] = 23;
    table[22 * 256 + 193] = 23;
    table[23 * 256 + 193] = 23;
    table[22 * 256 + 194] = 23;
    table[23 * 256 + 194] = 23;
    table[22 * 256 + 195] = 23;
    table[23 * 256 + 195] = 23;
    table[22 * 256 + 196] = 23;
    table[23 * 256 + 196] = 23;
    table[22 * 256 + 197] = 23;
    table[23 * 256 + 197] = 23;
    table[22 * 256 + 198] = 23;
    table[23 * 256 + 198] = 23;
    table[22 * 256 + 199] = 23;
    table[23 * 256 + 199] = 23;
    table[22 * 256 + 200] = 23;
    table[23 * 256 + 200] = 23;
    table[22 * 256 + 201] = 23;
    table[23 * 256 + 201] = 23;
    table[22 * 256 + 202] = 23;
    table[23 * 256 + 202] = 23;
    table[22 * 256 + 203] = 23;
    table[23 * 256 + 203] = 23;
    table[22 * 256 + 204] = 23;
    table[23 * 256 + 204] = 23;
    table[22 * 256 + 205] = 23;
    table[23 * 256 + 205] = 23;
    table[22 * 256 + 206] = 23;
    table[23 * 256 + 206] = 23;
    table[22 * 256 + 207] = 23;
    table[23 * 256 + 207] = 23;
    table[22 * 256 + 208] = 23;
    table[23 * 256 + 208] = 23;
    table[22 * 256 + 209] = 23;
    table[23 * 256 + 209] = 23;
    table[22 * 256 + 210] = 23;
    table[23 * 256 + 210] = 23;
    table[22 * 256 + 211] = 23;
    table[23 * 256 + 211] = 23;
    table[22 * 256 + 212] = 23;
    table[23 * 256 + 212] = 23;
    table[22 * 256 + 213] = 23;
    table[23 * 256 + 213] = 23;
    table[22 * 256 + 214] = 23;
    table[23 * 256 + 214] = 23;
    table[22 * 256 + 215] = 23;
    table[23 * 256 + 215] = 23;
    table[22 * 256 + 216] = 23;
    table[23 * 256 + 216] = 23;
    table[22 * 256 + 217] = 23;
    table[23 * 256 + 217] = 23;
    table[22 * 256 + 218] = 23;
    table[23 * 256 + 218] = 23;
    table[22 * 256 + 219] = 23;
    table[23 * 256 + 219] = 23;
    table[22 * 256 + 220] = 23;
    table[23 * 256 + 220] = 23;
    table[22 * 256 + 221] = 23;
    table[23 * 256 + 221] = 23;
    table[22 * 256 + 222] = 23;
    table[23 * 256 + 222] = 23;
    table[22 * 256 + 223] = 23;
    table[23 * 256 + 223] = 23;
    table[22 * 256 + 224] = 23;
    table[23 * 256 + 224] = 23;
    table[22 * 256 + 225] = 23;
    table[23 * 256 + 225] = 23;
    table[22 * 256 + 226] = 23;
    table[23 * 256 + 226] = 23;
    table[22 * 256 + 227] = 23;
    table[23 * 256 + 227] = 23;
    table[22 * 256 + 228] = 23;
    table[23 * 256 + 228] = 23;
    table[22 * 256 + 229] = 23;
    table[23 * 256 + 229] = 23;
    table[22 * 256 + 230] = 23;
    table[23 * 256 + 230] = 23;
    table[22 * 256 + 231] = 23;
    table[23 * 256 + 231] = 23;
    table[22 * 256 + 232] = 23;
    table[23 * 256 + 232] = 23;
    table[22 * 256 + 233] = 23;
    table[23 * 256 + 233] = 23;
    table[22 * 256 + 234] = 23;
    table[23 * 256 + 234] = 23;
    table[22 * 256 + 235] = 23;
    table[23 * 256 + 235] = 23;
    table[22 * 256 + 236] = 23;
    table[23 * 256 + 236] = 23;
    table[22 * 256 + 237] = 23;
    table[23 * 256 + 237] = 23;
    table[22 * 256 + 238] = 23;
    table[23 * 256 + 238] = 23;
    table[22 * 256 + 239] = 23;
    table[23 * 256 + 239] = 23;
    table[22 * 256 + 240] = 23;
    table[23 * 256 + 240] = 23;
    table[22 * 256 + 241] = 23;
    table[23 * 256 + 241] = 23;
    table[22 * 256 + 242] = 23;
    table[23 * 256 + 242] = 23;
    table[22 * 256 + 243] = 23;
    table[23 * 256 + 243] = 23;
    table[22 * 256 + 244] = 23;
    table[23 * 256 + 244] = 23;
    table[22 * 256 + 245] = 23;
    table[23 * 256 + 245] = 23;
    table[22 * 256 + 246] = 23;
    table[23 * 256 + 246] = 23;
    table[22 * 256 + 247] = 23;
    table[23 * 256 + 247] = 23;
    table[22 * 256 + 248] = 23;
    table[23 * 256 + 248] = 23;
    table[22 * 256 + 249] = 23;
    table[23 * 256 + 249] = 23;
    table[22 * 256 + 250] = 23;
    table[23 * 256 + 250] = 23;
    table[22 * 256 + 251] = 23;
    table[23 * 256 + 251] = 23;
    table[22 * 256 + 252] = 23;
    table[23 * 256 + 252] = 23;
    table[22 * 256 + 253] = 23;
    table[23 * 256 + 253] = 23;
    table[22 * 256 + 254] = 23;
    table[23 * 256 + 254] = 23;
    table[0 * 256 + 101] = 1;
    table[1 * 256 + 109] = 2;
    table[2 * 256 + 97] = 3;
    table[3 * 256 + 105] = 4;
    table[4 * 256 + 108] = 5;
    table[5 * 256 + 32] = 6;
    table[6 * 256 + 119] = 7;
    table[7 * 256 + 97] = 8;
    table[8 * 256 + 115] = 9;
    table[9 * 256 + 32] = 10;
    table[10 * 256 + 109] = 11;
    table[11 * 256 + 101] = 12;
    table[12 * 256 + 97] = 13;
    table[13 * 256 + 110] = 14;
    table[14 * 256 + 116] = 15;
    table[15 * 256 + 32] = 16;
    table[16 * 256 + 102] = 17;
    table[17 * 256 + 111] = 18;
    table[18 * 256 + 114] = 19;
    table[19 * 256 + 32] = 20;
    table[20 * 256 + 64] = 21;
    table[21 * 256 + 97] = 22;
    table[21 * 256 + 98] = 22;
    table[21 * 256 + 99] = 22;
    table[21 * 256 + 100] = 22;
    table[21 * 256 + 101] = 22;
    table[21 * 256 + 102] = 22;
    table[21 * 256 + 103] = 22;
    table[21 * 256 + 104] = 22;
    table[21 * 256 + 105] = 22;
    table[21 * 256 + 106] = 22;
    table[21 * 256 + 107] = 22;
    table[21 * 256 + 108] = 22;
    table[21 * 256 + 109] = 22;
    table[21 * 256 + 110] = 22;
    table[21 * 256 + 111] = 22;
    table[21 * 256 + 112] = 22;
    table[21 * 256 + 113] = 22;
    table[21 * 256 + 114] = 22;
    table[21 * 256 + 115] = 22;
    table[21 * 256 + 116] = 22;
    table[21 * 256 + 117] = 22;
    table[21 * 256 + 118] = 22;
    table[21 * 256 + 119] = 22;
    table[21 * 256 + 120] = 22;
    table[21 * 256 + 121] = 22;
    table[21 * 256 + 122] = 22;
    table[22 * 256 + 97] = 22;
    table[22 * 256 + 98] = 22;
    table[22 * 256 + 99] = 22;
    table[22 * 256 + 100] = 22;
    table[22 * 256 + 101] = 22;
    table[22 * 256 + 102] = 22;
    table[22 * 256 + 103] = 22;
    table[22 * 256 + 104] = 22;
    table[22 * 256 + 105] = 22;
    table[22 * 256 + 106] = 22;
    table[22 * 256 + 107] = 22;
    table[22 * 256 + 108] = 22;
    table[22 * 256 + 109] = 22;
    table[22 * 256 + 110] = 22;
    table[22 * 256 + 111] = 22;
    table[22 * 256 + 112] = 22;
    table[22 * 256 + 113] = 22;
    table[22 * 256 + 114] = 22;
    table[22 * 256 + 115] = 22;
    table[22 * 256 + 116] = 22;
    table[22 * 256 + 117] = 22;
    table[22 * 256 + 118] = 22;
    table[22 * 256 + 119] = 22;
    table[22 * 256 + 120] = 22;
    table[22 * 256 + 121] = 22;
    table[22 * 256 + 122] = 22;

    table
}

fn main(input: [u8; 25], username: [u8; 4]) {
    let substrings = regex_match(input);
    let extracted_substr: BoundedVec<Field, 25> = substrings.get(0);

    // TODO: why do these asserts fail?
    // Assert the obtained substring equals the expected username
    for i in 0..4 {
        assert(extracted_substr.get(i) == (username[i] as Field));
    }
}

#[test]
fn test_valid() {
    // "email was meant for @noir"
    let input: [u8; 25] = [
        101, 109, 97, 105, 108, 32, 119, 97, 115, 32, 109, 101, 97, 110, 116, 32, 102, 111, 114, 32, 64, 110, 111, 105, 114
    ];

    // Obtain the expected substring
    let substrings = regex_match(input);
    // The implementation is general for extraction of x substrings,
    // but we only have 1 here
    assert(substrings.len() == 1);
    let username = substrings.get(0);

    // Assert it equals "noir"
    assert(username.get(0) == 110);
    assert(username.get(1) == 111);
    assert(username.get(2) == 105);
    assert(username.get(3) == 114);
    assert(username.len() == 4);
}

#[test(should_fail)]
fn test_invalid() {
    // "email was meant for @noir"
    let input: [u8; 22] = [
        119, 114, 111, 110, 103, 32, 112, 114, 101, 102, 105, 120, 32, 102, 111, 114, 32, 64, 110, 111, 105, 114
    ];

    let username = regex_match(input);
}
